SELECT * FROM DIM_CUSTOMER;
SELECT * FROM DIM_DATE;
SELECT * FROM DIM_FRANCHISE;
SELECT * FROM DIM_LOCATION;
SELECT * FROM DIM_MENU;
SELECT * FROM DIM_SHIFT;
SELECT * FROM DIM_TRUCK;
SELECT * FROM FACT_ORDER_HEADER;
SELECT * FROM FACT_ORDER_DETAIL ORDER BY ORDER_ID;

-- Stage 1 – Basics

-- Task 1: List all customer full names and their cities.

SELECT 
    FULL_NAME,
    CITY_NAME
FROM DIM_CUSTOMER LIMIT 10;

-- Task 2: Get all distinct countries from DIM_CUSTOMER.

SELECT 
    DISTINCT COUNTRY_NAME
FROM DIM_CUSTOMER;

-- Task 3: Find customers who live in "India".

SELECT 
    *
FROM DIM_CUSTOMER
WHERE COUNTRY_NAME = 'India';

-- Task 4: Show top 10 customers sorted by FULL_NAME.

SELECT 
    * 
FROM DIM_CUSTOMER
ORDER BY FULL_NAME
LIMIT 10;

-- Stage 2 – Aggregations

-- Task 5: Count number of customers in each country.

SELECT 
    COUNTRY_NAME,
    COUNT(DISTINCT CUSTOMER_ID) AS NO_OF_CUSTOMER
FROM DIM_CUSTOMER
GROUP BY COUNTRY_NAME
ORDER BY NO_OF_CUSTOMER;

-- Task 6: Find average age of customers.

SELECT 
    AVG(AGE)
FROM DIM_CUSTOMER;

-- Task 7: Find countries that have more than 10000 customers.

SELECT 
    COUNTRY_NAME,
    COUNT(DISTINCT CUSTOMER_ID) AS NO_OF_CUSTOMER
FROM DIM_CUSTOMER
GROUP BY COUNTRY_NAME
HAVING COUNT(DISTINCT CUSTOMER_ID) > 10000
ORDER BY NO_OF_CUSTOMER;

-- Stage 3 – Joins (Star Schema)

-- Task 8: Show each order with customer full name and country.

SELECT 
    DISTINCT 
    FOH.ORDER_ID,
    FOH.CUSTOMER_ID,
    DC.FULL_NAME,
    DC.COUNTRY_NAME
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_CUSTOMER AS DC
 ON FOH.CUSTOMER_ID = DC.CUSTOMER_ID
 ORDER BY ORDER_ID;

-- Task 9: Get total sales by country.

SELECT 
    DC.COUNTRY_NAME,
    SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_CUSTOMER AS DC
 ON FOH.CUSTOMER_ID = DC.CUSTOMER_ID
GROUP BY DC.COUNTRY_NAME
ORDER BY TOTAL_SALES DESC;

-- Task 10: Show truck brand name and total sales made from that truck.

SELECT 
    DM.TRUCK_ID,
    DM.TRUCK_BRAND_NAME,
    DT.CITY_NAME,
    DT.COUNTRY_NAME,
    SUM(FOD.QUANTITY) AS TOTAL_SALES_QUANTITY_PRE_TRUCK,
    SUM(FOD.PRICE * FOD.QUANTITY) AS TOTAL_SALES_AMOUNT_PRE_TRUCK,
    SUM(FOD.PROFIT_PER_ORDER) AS PROFIT_PRE_TRUCK
FROM FACT_ORDER_DETAIL AS FOD
INNER JOIN DIM_MENU AS DM
 ON FOD.MENU_ITEM_ID = DM.MENU_ITEM_ID
INNER JOIN DIM_TRUCK AS DT
 ON DM.TRUCK_ID = DT.TRUCK_ID
GROUP BY DM.TRUCK_ID, DM.TRUCK_BRAND_NAME, DT.CITY_NAME, DT.COUNTRY_NAME
ORDER BY DM.TRUCK_ID;
    
    
-- Stage 4 – Date Analysis

-- Task 11: Show monthly sales trend (YEAR, MONTH, SUM ORDER_TOTAL).

SELECT 
    DD.YEAR,
    DD.MONTH,
    DD.MONTH_NAME,
    SUM(FOH.ORDER_TOTAL) AS TOTAL_AMOUNT_PER_MONTH
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_DATE AS DD
 ON CAST(FOH.ORDER_TS AS DATE) = CAST(DD.DATE_DAY AS DATE)
GROUP BY DD.YEAR, DD.MONTH, DD.MONTH_NAME
ORDER BY DD.YEAR, DD.MONTH, DD.MONTH_NAME;

-- Task 12: Count orders placed on weekends vs weekdays.

SELECT 
    IS_WEEKEND,
    COUNT(*) AS TOTAL_ORDER_PLACED
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_DATE AS DD
 ON CAST(FOH.ORDER_TS AS DATE) =  CAST(DD.DATE_DAY AS DATE)
GROUP BY IS_WEEKEND;

-- Stage 5 – Subqueries & CTE

-- Task 13: Find top 5 highest spending customers.

SELECT 
    CUSTOMER_ID,
    SUM(ORDER_TOTAL) AS TOTAL_AMOUNT
FROM FACT_ORDER_HEADER
GROUP BY CUSTOMER_ID
ORDER BY TOTAL_AMOUNT DESC
LIMIT 5;

WITH SUM_AMOUNT_BY_CUSTOMER AS (
    SELECT 
     CUSTOMER_ID,
     SUM(ORDER_TOTAL) AS TOTAL_AMOUNT
    FROM FACT_ORDER_HEADER
    GROUP BY CUSTOMER_ID
),
RANKING_CUSTOMER AS (
    SELECT 
        CUSTOMER_ID, 
        TOTAL_AMOUNT,
        DENSE_RANK() OVER (ORDER BY TOTAL_AMOUNT DESC) AS RANKING
    FROM SUM_AMOUNT_BY_CUSTOMER 
)
SELECT 
    CUSTOMER_ID, 
    TOTAL_AMOUNT,
    RANKING
FROM RANKING_CUSTOMER
WHERE RANKING <= 5;

-- Task 14: Find the city with the maximum total sales.

WITH TOTAL_SALES_BY_CITY AS (
    SELECT 
        DL.CITY_NAME AS CITY_NAME, 
        SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES_AMOUNT
    FROM FACT_ORDER_HEADER AS FOH
    INNER JOIN DIM_LOCATION AS DL
     ON FOH.LOCATION_ID = DL.LOCATION_ID
    GROUP BY CITY_NAME
),
RANKING AS (
    SELECT 
        CITY_NAME,
        TOTAL_SALES_AMOUNT,
        DENSE_RANK() OVER (ORDER BY TOTAL_SALES_AMOUNT DESC) AS RANKING
    FROM TOTAL_SALES_BY_CITY
)
SELECT 
    CITY_NAME, 
    TOTAL_SALES_AMOUNT 
FROM RANKING
WHERE RANKING = 1;

-- Stage 6 – Window Functions

-- Task 15: Rank customers by total sales within each country.

WITH TOTAL_SALES AS (
    SELECT 
        DC.FULL_NAME,
        FOH.CUSTOMER_ID,
        DC.COUNTRY_NAME,
        SUM(ORDER_TOTAL) AS TOTAL_SALES
    FROM FACT_ORDER_HEADER AS FOH
    INNER JOIN DIM_CUSTOMER AS DC
     ON FOH.CUSTOMER_ID = DC.CUSTOMER_ID
    GROUP BY DC.FULL_NAME, FOH.CUSTOMER_ID, DC.COUNTRY_NAME
),
RANKING AS (
    SELECT 
        FULL_NAME,
        CUSTOMER_ID,
        COUNTRY_NAME,
        DENSE_RANK() OVER (PARTITION BY COUNTRY_NAME ORDER BY TOTAL_SALES DESC) AS RANKING
    FROM TOTAL_SALES
)
SELECT * FROM RANKING;

-- Task 16: Show month-to-month sales difference.

WITH MONTHLY_SALES AS (
SELECT 
    DD.YEAR,
    DD.MONTH,
    DD.MONTH_NAME,
    SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES_BY_MONTH
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_DATE AS DD
 ON CAST(FOH.ORDER_TS AS DATE) = CAST(DD.DATE_DAY AS DATE)
GROUP BY DD.YEAR, DD.MONTH, DD.MONTH_NAME
)
SELECT 
    YEAR,
    MONTH,
    MONTH_NAME,
    TOTAL_SALES_BY_MONTH,
    TOTAL_SALES_BY_MONTH - LAG(TOTAL_SALES_BY_MONTH, 1, 0) OVER (ORDER BY YEAR, MONTH) AS PRE_MON_DIFF
FROM MONTHLY_SALES;

-- Stage 7 – Advanced Aggregations

-- Task 17: Get sales by country and city with subtotals.

SELECT 
    COALESCE(DL.COUNTRY_NAME, 'ALL COUNTRIES'),
    COALESCE(DL.CITY_NAME, 'ALL CITIES'),
    SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_LOCATION AS DL
 ON FOH.LOCATION_ID = DL.LOCATION_ID
GROUP BY 
    ROLLUP (COUNTRY_NAME, CITY_NAME)
ORDER BY DL.COUNTRY_NAME, TOTAL_SALES;

-- Task 18: Show sales by quarter and menu category, plus totals.

SELECT 
    COALESCE(CAST(DD.YEAR AS VARCHAR), 'OVERALL YEARS' ) AS YEAR,
    COALESCE(CAST(DD.QUARTER AS VARCHAR), 'OVERALL QUARTER') AS QUARTER,
    COALESCE(DM.MENU_ITEM_NAME, 'ALL ITEMS') AS ITEMS,
    SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_DATE AS DD
 ON CAST(ORDER_TS AS DATE) = CAST(DATE_DAY AS DATE)
INNER JOIN FACT_ORDER_DETAIL AS FOD
 ON FOH.ORDER_ID = FOD.ORDER_ID
INNER JOIN DIM_MENU AS DM
 ON  FOD.MENU_ITEM_ID = DM.MENU_ITEM_ID
GROUP BY 
    CUBE(DD.YEAR, DD.QUARTER, DM.MENU_ITEM_NAME)
ORDER BY YEAR, QUARTER, TOTAL_SALES;

-- Stage 8 – Business Reports

-- Task 19: Profitability by menu item and month.

SELECT 
    DM.MENU_ITEM_NAME,
    DD.YEAR,
    DD.MONTH,
    DD.MONTH_NAME,
    SUM(FOD.PROFIT_PER_ORDER) AS PROFIT_AMOUNT
FROM FACT_ORDER_DETAIL AS FOD
INNER JOIN FACT_ORDER_HEADER AS FOH
 ON FOD.ORDER_ID = FOH.ORDER_ID
INNER JOIN DIM_MENU AS DM
 ON FOD.MENU_ITEM_ID = DM.MENU_ITEM_ID
INNER JOIN DIM_DATE AS DD
 ON CAST(FOH.ORDER_TS AS DATE) = CAST(DD.DATE_DAY AS DATE)
GROUP BY 
    DM.MENU_ITEM_NAME, DD.YEAR, DD.MONTH, DD.MONTH_NAME
ORDER BY DD.YEAR, DD.MONTH;

-- Task 20: Sales per franchise across regions.

SELECT 
    DF.FRANCHISE_ID,
    DL.REGION,
    SUM(FOH.ORDER_TOTAL) AS TOTAL_SALES_AMOUNT
FROM FACT_ORDER_HEADER AS FOH
INNER JOIN DIM_TRUCK AS DT
 ON FOH.TRUCK_ID = DT.TRUCK_ID
INNER JOIN DIM_FRANCHISE AS DF
 ON DT.FRANCHISE_ID = DF.FRANCHISE_ID
INNER JOIN DIM_LOCATION AS DL
 ON DF.CITY_NAME = DL.CITY_NAME AND DF.COUNTRY_NAME = DL.COUNTRY_NAME
GROUP BY DF.FRANCHISE_ID, DL.REGION
ORDER BY DF.FRANCHISE_ID;

-- Stage 9 – Optimization & Snowflake Features

-- Task 22: Use QUALIFY to get top 3 customers per country.

WITH GET_TOTAL_SALES_BY_CUSTOMER AS (
    SELECT 
        FOH.CUSTOMER_ID AS CUSTOMER_ID , 
        DC.COUNTRY_NAME AS COUNTRY_NAME,
        SUM(FOH.ORDER_TOTAL) AS TOTAL_AMOUNT_SPEND
    FROM FACT_ORDER_HEADER AS FOH
    INNER JOIN DIM_CUSTOMER AS DC
     ON FOH.CUSTOMER_ID = DC.CUSTOMER_ID
    GROUP BY FOH.CUSTOMER_ID, DC.COUNTRY_NAME
 )
SELECT 
    CUSTOMER_ID,
    COUNTRY_NAME,
    TOTAL_AMOUNT_SPEND,
    DENSE_RANK() OVER (ORDER BY TOTAL_AMOUNT_SPEND DESC) AS TOP_CUSTOMER_RANKING
FROM GET_TOTAL_SALES_BY_CUSTOMER 
QUALIFY 
   TOP_CUSTOMER_RANKING <= 3;

-- Task 23: Create a materialized view for monthly sales.

CREATE OR REPLACE MATERIALIZED VIEW MONTHLY_SALES AS 
 SELECT 
    YEAR(ORDER_TS) AS YEAR,
    MONTH(ORDER_TS) AS MONTH,
    MONTHNAME(ORDER_TS) AS MONTHNAME,
    SUM(ORDER_TOTAL) MONTHLY_TOTAL_SALES  
FROM FACT_ORDER_HEADER 
GROUP BY YEAR(ORDER_TS), MONTH(ORDER_TS), MONTHNAME(ORDER_TS);

SELECT * FROM MONTHLY_SALES ORDER BY YEAR, MONTH;

-- Stage 10 – Bonus (Advanced Concepts)

-- Task 24: Write a query to detect customers with missing email/phone.

SELECT 
    CUSTOMER_ID,
    FULL_NAME,
    EMAIL,
    PHONE_NUMBER
FROM DIM_CUSTOMER
WHERE EMAIL IS NULL OR PHONE_NUMBER IS NULL;

-- Task 25: Show truck owners with more than 2 trucks.

SELECT 
    OWNER_FULL_NAME,
    OWNER_EMAIL,
    OWNER_PHONE_NUMBER,
    COUNT(TRUCK_ID)
FROM DIM_TRUCK
GROUP BY 1, 2, 3
HAVING COUNT(TRUCK_ID)>2;

-- Task 26: Calculate average profit margin per order.

WITH PROFIT_REVENUE AS (
    SELECT 
        ORDER_ID,
        SUM(PROFIT_PER_ORDER) AS PROFIT,
        SUM(PRICE*QUANTITY) AS REVENUE
    FROM FACT_ORDER_DETAIL
    GROUP BY ORDER_ID
),
MARGINE AS (
    SELECT 
        ORDER_ID,
        PROFIT/REVENUE AS PROFIT_MARGINE
    FROM PROFIT_REVENUE
)
SELECT AVG(PROFIT_MARGINE) AS PROFIT_MARGINE_PRE_ORDER FROM MARGINE;

